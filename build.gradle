plugins {
    id 'java'
    id 'org.ajoberstar.grgit' version '5.2.2'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'info.preva1l'
version = "1.6.5${versionMetadata()}"

ext {
    set 'version', version.toString()
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.auxilor.io/repository/maven-public/" }
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.codemc.io/repository/maven-snapshots/' }
}

dependencies {
    compileOnly 'com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT'

    compileOnly 'redis.clients:jedis:5.1.0'
    compileOnly 'org.apache.commons:commons-pool2:2.12.0'

    implementation 'com.zaxxer:HikariCP:5.1.0'
    compileOnly 'org.xerial:sqlite-jdbc:3.45.2.0'
    compileOnly 'com.mysql:mysql-connector-j:8.3.0'
    compileOnly 'org.mariadb.jdbc:mariadb-java-client:3.3.3'
    compileOnly 'org.mongodb:mongodb-driver-sync:5.0.0'

    implementation 'net.wesjd:anvilgui:1.9.3-SNAPSHOT'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'

    compileOnly 'com.willfp:libreforge:4.58.1'
    compileOnly 'com.willfp:eco:6.56.0'
    compileOnly 'com.willfp:EcoItems:5.43.1'

    compileOnly 'org.jetbrains:annotations:24.0.0'
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.jetbrains:annotations:24.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

    testCompileOnly 'org.jetbrains:annotations:24.1.0'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

shadowJar {
    relocate 'com.zaxxer', 'info.preva1l.fadah.libs'
    relocate 'net.wesjd', 'info.preva1l.fadah.libs'

    archiveClassifier.set('')
}

logger.lifecycle("Building Fadah ${version}")

@SuppressWarnings('GrMethodMayBeStatic')
def versionMetadata() {
    if (grgit == null) {
        return '-' + System.getenv("GITHUB_RUN_NUMBER") ? 'build.' + System.getenv("GITHUB_RUN_NUMBER") : 'unknown'
    }

    // Get if there is a tag for this commit
    def tag = grgit.tag.list().find { it.commit.id == grgit.head().id }
    if (tag != null) {
        return ''
    }

    // Otherwise, get the last commit hash and if it's a clean head
    return '-' + grgit.head().abbreviatedId + (grgit.status().clean ? '' : '-indev')
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

test {
    useJUnitPlatform()
}